import React, { useState, Suspense } from "react";
import { createRoot } from "react-dom/client";
import { ErrorBoundary } from "react-error-boundary";

/**
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã
 *
 * –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å
 */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è lazy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
const createLazyComponent = (importPath: string) => (timestamp: number) =>
  React.lazy(() => import(/* @vite-ignore */ `${importPath}?t=${timestamp}`));

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏—è—Ö
const TASKS = [
  {
    text: "–ó–∞–¥–∞–Ω–∏–µ 1-2: –û—Å–Ω–æ–≤—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)",
    createComponent: createLazyComponent("./task1-2_basic"),
  },
  {
    text: "–ó–∞–¥–∞–Ω–∏–µ 3-4: –§–æ—Ä–º—ã –∏ Context (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)",
    createComponent: createLazyComponent("./task3-4_basic"),
  },
  {
    text: "–ó–∞–¥–∞–Ω–∏–µ 1: –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–ø–æ–ª–Ω–æ–µ)",
    createComponent: createLazyComponent("./task1-basic-components"),
  },
  {
    text: "–ó–∞–¥–∞–Ω–∏–µ 2: –•—É–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø–æ–ª–Ω–æ–µ)",
    createComponent: createLazyComponent("./task2-hooks-state"),
  },
  {
    text: "–ó–∞–¥–∞–Ω–∏–µ 3: –§–æ—Ä–º—ã –∏ —Å–æ–±—ã—Ç–∏—è (–ø–æ–ª–Ω–æ–µ)",
    createComponent: createLazyComponent("./task3-forms-events"),
  },
  {
    text: "–ó–∞–¥–∞–Ω–∏–µ 4: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–ø–æ–ª–Ω–æ–µ)",
    createComponent: createLazyComponent("./task4-advanced-patterns"),
  },
];

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
const TaskErrorFallback: React.FC<{
  error: Error;
  resetErrorBoundary: () => void;
  onRetry?: () => void;
}> = ({ error, resetErrorBoundary, onRetry }) => (
  <div
    style={{
      padding: "20px",
      border: "2px solid red",
      borderRadius: "8px",
      backgroundColor: "#fff5f5",
    }}
  >
    <h2>üö® –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞–Ω–∏–∏</h2>
    <p>
      <strong>–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å:</strong> –í –∫–æ–¥–µ —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –µ—Å—Ç—å –æ—à–∏–±–∫–∞.
    </p>
    <details style={{ marginTop: "15px" }}>
      <summary style={{ cursor: "pointer", fontWeight: "bold" }}>
        –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      </summary>
      <div
        style={{
          marginTop: "10px",
          padding: "10px",
          backgroundColor: "#f1f1f1",
          borderRadius: "4px",
        }}
      >
        <p>
          <strong>–û—à–∏–±–∫–∞:</strong> {error.message}
        </p>
        <pre style={{ fontSize: "12px", overflow: "auto", maxHeight: "200px" }}>
          {error.stack}
        </pre>
      </div>
    </details>
    <div style={{ marginTop: "15px" }}>
      <p>
        üí° <strong>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</strong> –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–π–¥–∏—Ç–µ –∏
        –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É.
      </p>
      <button
        onClick={() => {
          onRetry?.();
          resetErrorBoundary();
        }}
        style={{ marginTop: "10px", padding: "8px 16px" }}
      >
        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
      </button>
    </div>
  </div>
);

const App: React.FC = () => {
  const [currentTaskIndex, setCurrentTaskIndex] = useState<number | undefined>(() => {
    const hash = window.location.hash.slice(1); // —É–±–∏—Ä–∞–µ–º #
    const index = parseInt(hash, 10);
    return !isNaN(index) && index >= 0 && index < TASKS.length ? index : undefined;
  });
  const [refreshTimestamps, setRefreshTimestamps] = useState<Record<number, number>>({});

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∑–∞–¥–∞–Ω–∏—è
  const forceRefresh = (taskIndex: number) => {
    setRefreshTimestamps(prev => ({
      ...prev,
      [taskIndex]: Date.now()
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  const handleTaskChange = (index: number) => {
    setCurrentTaskIndex(index);
    window.location.hash = index.toString();
    forceRefresh(index);
  };

  return (
    <div className="app">
      <header className="app-header">
        <h1>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 2: React + TypeScript</h1>
        <nav className="task-nav">
          {TASKS.map((task, index) => (
            <button
              key={index}
              className={currentTaskIndex === index ? "active" : ""}
              onClick={() => handleTaskChange(index)}
            >
              {task.text}
            </button>
          ))}
        </nav>
      </header>

      <main className="app-main">
        <ErrorBoundary
          FallbackComponent={(props) => (
            <TaskErrorFallback
              {...props}
              onRetry={() => currentTaskIndex !== undefined && forceRefresh(currentTaskIndex)}
            />
          )}
          resetKeys={[currentTaskIndex, currentTaskIndex !== undefined ? refreshTimestamps[currentTaskIndex] : 0]}
        >
          <Suspense fallback={<div>–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∑–∞–¥–∞–Ω–∏–µ...</div>}>
            {currentTaskIndex === undefined && <div>–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</div>}
            {currentTaskIndex !== undefined &&
              TASKS[currentTaskIndex] &&
              React.createElement(
                TASKS[currentTaskIndex].createComponent(refreshTimestamps[currentTaskIndex] || Date.now())
              )}
            {currentTaskIndex !== undefined && !TASKS[currentTaskIndex] && (
              <div>–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
            )}
          </Suspense>
        </ErrorBoundary>
      </main>
    </div>
  );
};

// –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const container = document.getElementById("root");
if (container) {
  const root = createRoot(container);
  root.render(<App />);
} else {
  console.error("Root container not found");
}

export default App;
